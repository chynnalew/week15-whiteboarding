Removing duplicates
----------------------------------------

prompt:
  Write an algorithm that removes any duplicates from an array

requirements:
  Solve the prompt WITHOUT using filter().
  -Then show how it would be solved with filter().
  Solve with and without recursion.

----------------------------------------

questions to ask: 
  Is the input always an array?
  How long/short is the input?
  do the remaining elements need to appear in the same order?

possible edge cases:
  an empty array
  the same number in string form/ int form

----------------------------------------

inputs/outputs:

  input: [7, 9, "hi", 7, 53]
  output: [7, 9, "hi", 12, 53]

  input: [7, 7, 7]
  output: [7]

  input: [7, "7"]
  output: ?

  input: []
  output: ? || return empty array?

----------------------------------------

standard plain text steps:
  1) declare an empty array to push elements into (noDupe = [])
  2) loop through the original array 
  3) branch - if !noDupe.includes(i), noDupe.push(i), else do nothing
  4) return noDupe

standard solution:

  function removeDupes(array) {
    let noDupe = [];
    array.forEach(element => {
      if(!noDupe.includes(element) {
        noDupe.push(element);
      });
    });
    return noDupe;
  }

----------------------------------------

standard plain text steps with filter():
  .filter() takes a function as an argument, creating a new array with all elements that pass the "test" in the argument function. The arguments the filter callback function takes are (element, index, array)

  1) use filter taking two arguments 1. element, 2. index
  2) include in new array if the array.indexOf(element) === index
    -this searches through new array to see if the first instance of the element is in the same index as the current index you are looking at. if so, keep that element! if not, that element already exists and the current index is a duplicate

filter solution:

  function removeDupe(array) {
    return array.filter((element, index) => array.indexOf(element) === index);
  }
----------------------------------------

recursive plain text steps:
  iterate backwards so it will catch all duplicates!!!
  compare the last index to all the others and see if it's duplicated. if so remove that index, if not keep it!

  1) create function that takes the array as an argument
    function(array)
  2) create edge case to break out of recursion
    if array.length === 1, return array[0]
  3) isolate the last index 
    const element = array[length-1]
    const restArray = array.splice(-1)
    a) check if the rest of the array contains the first index value
      1) if(restArray.includes(element)) 
        don't save the value, begin recursion:
        return function(restArray)
      2) if (!restArray.includes(element))
        save the element, begin recursion:
        return function(restArray) + element
    

recursive solution:

  removeDupe(array) {
    if (array.length === 1) {
      return array[0];
    }
    const element = array[length-1];
    const restArray = array.splice(-1);
    if(restArray.includes(element)) {
      return removeDupe(restArray)
    } else {
      return removeDupe(restArray) + element;
    }
  }