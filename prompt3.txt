Compressing Strings
----------------------------------------

prompt:
  write and algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the character has been compressed.
  ex: aaa = 3a

requirements:
  no special requirements

----------------------------------------

questions to ask:
  always strings?
  do we add only sequential duplications?
  account for special characters?

possible edge cases:
  spaces?
  empty string?

----------------------------------------

inputs/outputs:

  input: "aaabccdddda"
  output: "3ab2c4da"

  input: "abababccc"
  output: "ababab3c"

----------------------------------------

standard plain text steps:
  1) declare counter variable (count = 1) to store number of duplicates
  2) create a variable to store the new string (newStr = "");
  3) start a loop:
    a) if the current index === next index, count ++
    b) if current index !== next index:
      newStr.append(count + string[currentIndex]);
      reset count to 1
  4) return newStr

standard solution:


----------------------------------------

recursive plain text steps:
  1) create function that takes the string, a counter set to 0, and the current character(string.charAt(0))
  2) use the .length method to see if the string is only one character, if so:
    return the character if count = 1;
    if count > 1,
    return count+ currentCharacter
    (this is the branch that will break the recursive loop)
  3) start branching:
    a)if the string.charAt(0) === current character
      return the function(string.substring(1, string.length), count +1, current character)
    b) if string.charAt(0) !== current character 
      return count+currentCharacter + function(string.substring(1, string.length), 0, string.charAt(0))

recursive solution:


